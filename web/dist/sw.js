const CACHE_VERSION=1,CACHE_NAME="ELECV2P_SW1",CACHE_LIST_PRE=[],CACHE_URL=new Map([]),CACHE_HOST=new Map([["sponsors.elecv2.workers.dev",1]]),CACHE_PATH=new Map([["/manifest.json",1],["/efss/logo/elecV2P.png",2],["/jsfile",2],["/store",2]]),CACHE_MODE=new Map([["navigate",2]]),CACHE_DESTINATION=new Map([["image",0],["script",0],["style",0],["manifest",1],["document",2]]),STRATEGY_DEFAULT=-1,putInCache=async(e,t)=>{console.debug("cache",e.url,"type:",e.destination);const a=await caches.open(CACHE_NAME);await a.put(e,t)},eCache=async e=>{const t=await caches.match(e.request);if(t)return console.debug("serve",e.request.url,"from cache"),t},eFetch=async(e,t=!1)=>{try{if("navigate"===e.request.mode){const t=await e.preloadResponse;if(t)return console.debug("serve",e.request.url,"from preload"),putInCache(e.request,t.clone()),t}const t=await fetch(e.request);return putInCache(e.request,t.clone()),t}catch(a){if(t){console.error(a),console.debug("try get",e.request.url,"response from cache");const t=await eCache(e);if(t)return t}return console.error(a,e.request.url),new Response(`{ "rescode": -1, "message": "Network Error: ${a.message}"}`,{header:{"Content-Type":"application/json;charset=utf-8"}})}},STRATEGIES=[async e=>await eCache(e)||await eFetch(e),async e=>{const t=await eCache(e),a=eFetch(e);return t||await a},async e=>await eFetch(e,!0)],getStrategy=e=>{let t=-1,{url:a,mode:s,method:n,destination:c}=e;if("GET"!==n)return console.debug("fetch",a,"method:",n,"mode:",s,"strategy:",t),t;let r=new URL(a),o=r.hostname,i=r.pathname;switch(!0){case CACHE_URL.has(a):t=CACHE_URL.get(a);break;case CACHE_HOST.has(o):t=CACHE_HOST.get(o);break;case CACHE_PATH.has(i):t=CACHE_PATH.get(i);break;case CACHE_DESTINATION.has(c):t=CACHE_DESTINATION.get(c);break;case CACHE_MODE.has(s):t=CACHE_MODE.get(s)}return-1===t||STRATEGIES[t]||(console.error("strategy",t,"not exist yet"),t=-1),console.debug("fetch",a,"method:",n,"mode:",s,"strategy:",t),t},deleteCache=async e=>{console.debug("delete cache",e),await caches.delete(e)},deleteOldCaches=async()=>{const e=[CACHE_NAME],t=(await caches.keys()).filter((t=>!e.includes(t)));await Promise.all(t.map(deleteCache))};self.addEventListener("install",(e=>{console.debug("install"),self.skipWaiting(),e.waitUntil((async()=>{const e=await caches.open(CACHE_NAME);await e.addAll(CACHE_LIST_PRE)})())})),self.addEventListener("activate",(e=>{console.debug("activate"),e.waitUntil((async()=>{"navigationPreload"in self.registration&&await self.registration.navigationPreload.enable(),await deleteOldCaches()})()),self.clients.claim()})),self.addEventListener("fetch",(e=>{let t=getStrategy(e.request);-1!==t&&e.respondWith(STRATEGIES[t](e))}));